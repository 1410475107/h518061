-- --------------------------------------------------------
-- 主机:                           127.0.0.1
-- 服务器版本:                        5.5.53-log - MySQL Community Server (GPL)
-- 服务器操作系统:                      Win32
-- HeidiSQL 版本:                  9.5.0.5280
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 导出  表 examapp.questions 结构
CREATE TABLE IF NOT EXISTS `questions` (
  `qid` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` text NOT NULL,
  `cid` int(11) NOT NULL,
  `answer` text,
  `anyle` text,
  `keywords` varchar(500) DEFAULT NULL,
  `import` tinyint(4) NOT NULL DEFAULT '1',
  `diffict` tinyint(4) NOT NULL DEFAULT '1',
  `comefrom` varchar(200) DEFAULT NULL,
  `aid` int(11) NOT NULL,
  `username` char(6) NOT NULL,
  `addtimes` datetime NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '1',
  PRIMARY KEY (`qid`)
) ENGINE=InnoDB AUTO_INCREMENT=259 DEFAULT CHARSET=utf8 COMMENT='试题表';

-- 正在导出表  examapp.questions 的数据：~253 rows (大约)
/*!40000 ALTER TABLE `questions` DISABLE KEYS */;
INSERT INTO `questions` (`qid`, `title`, `cid`, `answer`, `anyle`, `keywords`, `import`, `diffict`, `comefrom`, `aid`, `username`, `addtimes`, `status`) VALUES
	(1, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(2, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(3, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(4, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(5, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(6, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(11, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(12, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(13, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(14, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(15, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(16, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(21, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(22, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(23, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(24, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(25, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(26, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(31, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(32, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(33, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(34, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(35, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(36, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(37, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(38, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(39, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(40, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(41, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(42, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(43, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(44, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(45, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(46, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(47, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(48, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(49, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(50, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(51, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(52, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(53, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(54, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(55, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(56, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(57, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(58, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(59, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(60, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(61, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(62, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(63, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(64, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(65, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(66, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(67, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(68, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(69, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(70, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(71, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(72, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(73, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(74, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(75, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(76, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(77, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(78, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(79, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(80, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(81, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(82, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(83, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(84, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(85, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(86, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(87, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(88, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(89, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(90, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(91, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(92, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(93, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(94, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(95, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(96, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(97, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(98, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(99, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(100, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(101, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(102, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(103, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(104, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(105, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(106, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(107, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(108, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(109, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(110, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(111, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(112, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(113, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(114, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(115, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(116, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(117, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(118, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(119, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(120, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(121, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(122, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(123, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(124, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(125, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(126, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(127, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(128, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(129, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(130, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(131, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(132, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(133, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(134, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(135, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(136, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(137, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(138, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(139, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(140, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(141, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(142, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(143, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(144, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(145, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(146, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(147, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(148, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(149, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(150, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(151, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(152, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(153, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(154, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(155, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(156, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(157, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(158, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(159, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(160, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(161, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(162, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(163, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(164, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(165, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(166, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(167, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(168, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(169, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(170, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(171, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(172, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(173, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(174, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(175, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(176, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(177, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(178, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(179, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(180, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(181, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(182, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(183, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(184, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(185, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(186, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(187, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(188, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(189, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(190, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(191, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(192, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(193, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(194, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(195, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(196, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(197, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(198, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(199, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(200, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(201, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(202, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(203, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(204, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(205, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(206, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(207, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(208, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(209, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(210, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(211, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(212, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(213, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(214, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(215, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(216, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(217, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(218, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(219, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(220, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(221, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(222, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(223, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(224, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(225, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(226, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(227, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(228, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(229, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(230, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(231, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(232, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(233, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(234, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(235, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(236, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(237, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(238, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(239, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(240, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(241, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(242, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(243, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(244, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(245, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(246, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(247, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(248, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(249, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(250, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(251, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(252, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1),
	(253, '<p>JavaScript中如何检测一个变量是一个String类型？请写出函数实现</p>', 2, '<p>typeof(obj) === "string"<br>typeof obj === "string"<br>obj.constructor === String<br></p>', '', '', 2, 4, '', 1, '管理员', '2018-09-29 11:02:20', 1),
	(254, '<p>请用js去除字符串空格？</p>', 2, '<p><span style="font-weight: bold;">方法一：使用replace正则匹配的方法</span><br>去除所有空格: str = str.replace(/\\s*/g,"");      <br>去除两头空格: str = str.replace(/^\\s*|\\s*$/g,"");<br>去除左空格： str = str.replace( /^\\s*/, “”);<br>去除右空格： str = str.replace(/(\\s*$)/g, "");<br>str为要去除空格的字符串，实例如下：<br>var str = " 23 23 ";<br>var str2 = str.replace(/\\s*/g,"");<br>console.log(str2); // 2323</p><p><br><span style="font-weight: bold;">方法二：使用str.trim()方法</span><br>str.trim()局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = str.trim();<br>console.log(str2);   //xiao  ming <br>同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格。</p><p><br><span style="font-weight: bold;">方法三：使用jquery,$.trim(str)方法</span><br>$.trim(str)局限性：无法去除中间的空格，实例如下：<br>var str = "   xiao  ming   ";<br>var str2 = $.trim(str)<br>console.log(str2);   //  xiao  ming<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:03:24', 1),
	(255, '<p>怎样添加、移除、移动、复制、创建和查找节点？</p>', 2, '<p><span style="font-weight: bold;">1）创建新节点</span><br>　　createDocumentFragment() //创建一个DOM片段<br>　　createElement() //创建一个具体的元素<br>　　createTextNode() //创建一个文本节点<br><span style="font-weight: bold;">2）添加、移除、替换、插入</span><br>　　appendChild() //添加<br>　　removeChild() //移除<br>　　replaceChild() //替换<br>　　insertBefore() //插入<br><span style="font-weight: bold;">3）查找</span><br>　　getElementsByTagName() //通过标签名称<br>　　getElementsByName() //通过元素的Name属性的值<br>　　getElementById() //通过元素Id，唯一性<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:09', 1),
	(256, '<p>比较typeof与instanceof？</p>', 2, '<p>相同点：JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：<br>a instanceof b?alert("true"):alert("false"); //a是b的实例？真:假<br>var a = new Array(); <br>alert(a instanceof Array);  // true<br>alert(a instanceof Object)  // true<br>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。<br>function test(){};<br>var a = new test();<br>alert(a instanceof test)   // true<br>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。<br>if (window instanceof Object){ alert(\'Y\')} else {  alert(\'N\');}  // \'N\'<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:04:52', 1),
	(257, '<p>比如何理解闭包？</p>', 2, '<p>1、定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。<br>2、表现形式：使函数外部能够调用函数内部定义的变量。<br>3、实例如下：<br>(1)、根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count 。<br>var count=10;   //全局作用域 标记为flag1<br>function add(){<br>    var count=0;    //函数全局作用域 标记为flag2<br>    return function(){<br>        count+=1;   //函数的内部作用域<br>        alert(count);<br>    }<br>}<br>var s = add()<br>s();//输出1<br>s();//输出2<br>4、变量的作用域<br>要理解闭包，首先必须理解Javascript特殊的变量作用域。<br>变量的作用域分类：全局变量和局部变量。<br>特点：<br>1、函数内部可以读取函数外部的全局变量；在函数外部无法读取函数内的局部变量。<br>2、函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！<br> 5、使用闭包的注意点<br>1）滥用闭包，会造成内存泄漏：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）会改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:20', 1),
	(258, '<p>什么是跨域？跨域请求资源的方法有哪些？</p>', 2, '<p>1、什么是跨域？<br>由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。存在跨域的情况：<br>•	网络协议不同，如http协议访问https协议。<br>•	端口不同，如80端口访问8080端口。<br>•	域名不同，如qianduanblog.com访问baidu.com。<br>•	子域名不同，如abc.qianduanblog.com访问def.qianduanblog.com。<br>•	域名和域名对应ip,如www.a.com访问20.205.28.90.<br>2、跨域请求资源的方法：<br>(1)、porxy代理<br>定义和用法：proxy代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。<br>实现方法：通过nginx代理；<br>注意点：1、如果你代理的是https协议的请求，那么你的proxy首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。<br>(2)、CORS 【Cross-Origin Resource Sharing】<br>定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。<br>使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：<br>res.writeHead(200, {<br>    "Content-Type": "text/html; charset=UTF-8",<br>    "Access-Control-Allow-Origin":\'http://localhost\',<br>    \'Access-Control-Allow-Methods\': \'GET, POST, OPTIONS\',<br>    \'Access-Control-Allow-Headers\': \'X-Requested-With, Content-Type\'<br>});<br>(3)、jsonp<br>定义和用法：通过动态插入一个script标签。浏览器对script的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。<br>特点：通过情况下，通过动态创建script来读取他域的动态资源，获取的数据一般为json格式。<br>实例如下：<br>&lt;script&gt;<br>    function testjsonp(data) {<br>       console.log(data.name); // 获取返回的结果<br>    }<br>&lt;/script&gt;<br>&lt;script&gt;<br>    var _script = document.createElement(\'script\');<br>    _script.type = "text/javascript";<br>    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";<br>    document.head.appendChild(_script);<br>&lt;/script&gt;<br>缺点：<br>　　1、这种方式无法发送post请求（这里）<br>　　2、另外要确定jsonp的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。<br></p>', '', '', 1, 5, '', 1, '管理员', '2018-09-29 11:05:57', 1);
/*!40000 ALTER TABLE `questions` ENABLE KEYS */;

/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
